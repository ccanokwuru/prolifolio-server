generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique @db.VarChar(200)
  password     String    @db.VarChar(255)
  role         ROLE      @default(user)
  first_name   String    @db.VarChar(200)
  last_name    String    @db.VarChar(200)
  other_name   String?   @db.VarChar(200)
  avatar       String?   @db.VarChar(500)
  display_name String?   @unique @db.VarChar(200)
  artist       Artist?
  works        Work[]    @relation("Viewed")
  jobs         Job[]
  orders       Order[]
  wishlist     Work[]    @relation("Wishlist")
  biddings     Bidding[]
  contacts     Contact[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Contact {
  id        String   @id @default(uuid()) @db.Uuid
  type      CONTACT?
  phone     String   @unique @db.VarChar(20)
  email     String?  @db.VarChar(500)
  address   String   @db.VarChar(500)
  city      String   @db.VarChar(100)
  state     String   @db.VarChar(100)
  country   String   @db.VarChar(100)
  zipcode   String   @db.VarChar(10)
  position  String?  @db.VarChar(100)
  owner     User?    @relation(fields: [ownerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  ownerId   String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artist {
  id           String           @id @default(uuid()) @db.Uuid
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String           @unique @db.Uuid
  works        Work[]
  applications JobApplication[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Work {
  id          String    @id @default(uuid()) @db.Uuid
  title       String    @db.VarChar(200)
  description String?
  artist      Artist?   @relation(fields: [artistId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  artistId    String?   @db.Uuid
  views       User[]    @relation("Viewed")
  biddings    Bidding[]
  orders      Order[]
  price       Decimal?  @db.Money
  currency    String?   @default("NGN") @db.VarChar(10)
  sellAs      SELLAS[]
  isSold      Boolean?
  files       Json?
  watchedBy   User[]    @relation("Wishlist")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Bidding {
  id        String   @id @default(uuid()) @db.Uuid
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workId    String   @unique @db.Uuid
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId    String?  @db.Uuid
  offer     Decimal  @db.Money
  status    BIDDING? @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String   @id @default(uuid()) @db.Uuid
  description String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId      String?  @db.Uuid
  status      ORDER    @default(pending)
  work        Work     @relation(fields: [workId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workId      String   @unique @db.Uuid
  price       Decimal? @db.Money
  currency    String?  @db.VarChar(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Job {
  id           String           @id @default(uuid()) @db.Uuid
  title        String           @db.VarChar(200)
  description  String?
  status       JOB
  owner        User             @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId      String           @db.Uuid
  applications JobApplication[]
  budget       Json?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model JobApplication {
  id        String   @id @default(uuid()) @db.Uuid
  job       Job?     @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId     String?  @db.Uuid
  cover     String?
  artist    Artist?  @relation(fields: [artistId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  artistId  String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ROLE {
  user
  artist
  admin
}

enum SELLAS {
  best_offer
  buy_now
}

enum BIDDING {
  pending
  accepted
  declined
}

enum ORDER {
  pending
  accepted
  declined
  paid
  pending_delivery
  delivered
  cancelled
}

enum JOB {
  open
  locked
  taken
  closed
}

enum CONTACT {
  default
  residential
  office
  art_studio
}
