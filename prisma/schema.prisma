generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  email         String         @unique @db.VarChar(200)
  password      String         @db.VarChar(255)
  profile       Profile?
  role          ROLE           @default(user)
  session       Session[]
  auth_recovery AuthRecovery[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model AuthRecovery {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.Uuid
  token     String   @unique
  createdAt DateTime @default(now())
  expired   Boolean  @default(false)
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique @db.VarChar(500)
  authToken String?  @unique @db.VarChar(500)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.Uuid
  expired   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id            String         @id @default(uuid()) @db.Uuid
  first_name    String         @db.VarChar(200)
  last_name     String         @db.VarChar(200)
  other_name    String?        @db.VarChar(200)
  avatar        String?        @db.VarChar(500)
  display_name  String?        @unique @db.VarChar(200)
  interests     Skill[]
  contacts      Contact[]
  artist        Artist?
  favourites    Favourite[]
  works         Work[]         @relation("Viewed")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  reviews       Review[]
  reactions     Reaction[]
  comments      Comment[]
  posts         Post[]
  jobs          Job[]
  orders        Order[]
  wishlist      Work[]         @relation("Wishlist")
  messages      Message[]      @relation("sender")
  messages_read Message[]      @relation("readBy")
  notifications Notification[]
  biddings      Bidding[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String         @unique @db.Uuid
  chatRooms     ChatRoom[]
  ratings       Rating[]
}

model Contact {
  id        String   @id @default(uuid()) @db.Uuid
  type      CONTACT?
  phone     String   @unique @db.VarChar(20)
  email     String?  @db.VarChar(500)
  address   String   @db.VarChar(500)
  city      String   @db.VarChar(100)
  state     String   @db.VarChar(100)
  country   String   @db.VarChar(100)
  zipcode   String   @db.VarChar(10)
  position  String?  @db.VarChar(100)
  owner     Profile? @relation(fields: [ownerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  ownerId   String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artist {
  id           String           @id @default(uuid()) @db.Uuid
  profile      Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId    String           @unique @db.Uuid
  works        Work[]
  skills       Skill[]
  applications JobApplication[]
  favourites   Favourite[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  ratings      Rating[]
}

model Category {
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @unique @db.VarChar(100)
  categories  Category[] @relation("CategoryToCategory")
  skills      Skill[]
  works       Work[]
  jobs        Job[]
  description String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  parentId    String?    @db.Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Skill {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique @db.VarChar(100)
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  categoryId  String?   @db.Uuid
  description String?
  parent      Skill?    @relation("SkillToSkill", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  parentId    String?   @db.Uuid
  skills      Skill[]   @relation("SkillToSkill")
  users       Profile[]
  artists     Artist[]
  works       Work[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Work {
  id          String      @id @default(uuid()) @db.Uuid
  title       String      @db.VarChar(200)
  category    Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  categoryId  String?     @db.Uuid
  description String?
  artist      Artist?     @relation(fields: [artistId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  artistId    String?     @db.Uuid
  favourites  Favourite[]
  views       Profile[]   @relation("Viewed")
  biddings    Bidding[]
  reviews     Review[]
  orders      Order[]
  price       Decimal?    @db.Money
  currency    String?     @default("NGN") @db.VarChar(10)
  sellAs      SELLAS[]
  isSold      Boolean?
  skills      Skill[]
  files       Json?
  watchedBy   Profile[]   @relation("Wishlist")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Review {
  id        String    @id @default(uuid()) @db.Uuid
  user      Profile?  @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId    String?   @db.Uuid
  comment   String?   @db.VarChar(100)
  rating    Float
  work      Work      @relation(fields: [workId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workId    String    @db.Uuid
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Rating {
  id        String   @id @default(uuid()) @db.Uuid
  rating    Float
  user      Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  profileId String?  @db.Uuid
  artist    Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artistId  String   @db.Uuid
}

model Bidding {
  id        String   @id @default(uuid()) @db.Uuid
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workId    String   @unique @db.Uuid
  user      Profile? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId    String?  @db.Uuid
  offer     Decimal  @db.Money
  status    BIDDING? @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String   @id @default(uuid()) @db.Uuid
  description String?
  user        Profile? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId      String?  @db.Uuid
  status      ORDER    @default(pending)
  work        Work     @relation(fields: [workId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workId      String   @unique @db.Uuid
  price       Decimal? @db.Money
  currency    String?  @db.VarChar(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Favourite {
  id        String   @id @default(uuid()) @db.Uuid
  work      Work?    @relation(fields: [workId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workId    String?  @db.Uuid
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String?  @db.Uuid
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.Uuid
  artist    Artist?  @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artistId  String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  id        String   @id @default(uuid()) @db.Uuid
  type      REACTION
  user      Profile? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId    String?  @db.Uuid
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id           String           @id @default(uuid()) @db.Uuid
  title        String           @db.VarChar(200)
  category     Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  categoryId   String?          @db.Uuid
  description  String?
  status       JOB?             @default(open)
  owner        Profile          @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId      String           @db.Uuid
  applications JobApplication[]
  budget       Json?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model JobApplication {
  id        String       @id @default(uuid()) @db.Uuid
  job       Job?         @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId     String?      @db.Uuid
  cover     String?
  artist    Artist?      @relation(fields: [artistId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  artistId  String?      @db.Uuid
  status    APPLICATION? @default(pending)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Notification {
  id        String       @id @default(uuid()) @db.Uuid
  message   String
  type      NOTIFICATION @default(single)
  users     Profile[]
  readBy    String[]     @db.Uuid
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Message {
  id          String    @id @default(uuid()) @db.Uuid
  sender      Profile?  @relation(name: "sender", fields: [senderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  senderId    String?   @db.Uuid
  message     String
  replies     Message[] @relation("ReplyToMessage")
  p_message   Message?  @relation("ReplyToMessage", fields: [p_messageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  p_messageId String?   @db.Uuid
  forwarded   Boolean   @default(false)
  readBy      Profile[] @relation(name: "readBy")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  room        ChatRoom  @relation(fields: [roomId], references: [id])
  roomId      String    @db.Uuid
}

model ChatRoom {
  id           String    @id @default(uuid()) @db.Uuid
  type         CHAT      @default(personal)
  name         String?   @db.VarChar(200)
  messages     Message[]
  participants Profile[]
}

model Post {
  id         String      @id @default(uuid()) @db.Uuid
  slug       String      @unique @db.VarChar(200)
  title      String      @db.VarChar(200)
  content    String
  thumbnail  String?     @db.VarChar(500)
  author     Profile?    @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId   String?     @db.Uuid
  comments   Comment[]
  favourites Favourite[]
  reactions  Reaction[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Comment {
  id        String    @id @default(uuid()) @db.Uuid
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String?   @db.Uuid
  parent    Comment?  @relation(fields: [parentId], references: [id], name: "CommentToComment", onDelete: Cascade, onUpdate: Cascade)
  parentId  String?   @db.Uuid
  message   String
  user      Profile?  @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId    String?   @db.Uuid
  comments  Comment[] @relation("CommentToComment")
  review    Review?   @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewId  String?   @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum ROLE {
  user
  artist
  admin
}

enum NOTIFICATION {
  single
  multiple
  broadcast
}

enum CONTACT {
  default
  residential
  office
  art_studio
}

enum SELLAS {
  best_offer
  buy_now
}

enum BIDDING {
  pending
  accepted
  declined
}

enum ORDER {
  pending
  accepted
  declined
  paid
  pending_delivery
  delivered
  cancelled
}

enum REACTION {
  like
  dislike
  love
  emotional
  happy
  sad
}

enum CHAT {
  group
  personal
}

enum JOB {
  open
  locked
  taken
  closed
}

enum APPLICATION {
  pending
  accepted
  declined
}
