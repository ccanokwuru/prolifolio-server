generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id               Int         @id @default(autoincrement())
  first_name       String?     @db.VarChar(200)
  last_name        String?     @db.VarChar(200)
  other_name       String?     @db.VarChar(200)
  display_name     String      @unique @db.VarChar(200)
  email            String      @unique @db.VarChar(200)
  password         String      @db.VarChar(255)
  avatar           String?     @db.VarChar(500)
  interests        Skill[]
  contacts         Contact[]
  creator          Creator?
  favourites       Favourite[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  admin            Admin?
  reviews          Review[]
  reactions        Reaction[]
  posts            Post[]
  comments         Comment[]
  role             String      @default("collector") @db.VarChar(20)
  jobs             Job[]
  orders           Order[]
  wishlist         Work[]
  messagesRecieved Message[]   @relation("Recieved")
  messagesSent     Message[]   @relation("Sent")
  tokens           Token[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
}

model Creator {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  works      Work[]
  skills     Skill[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  jobs       Job[]
  studio     Studio?
  favourites Favourite[]
  userId     Int         @unique
  reactions  Reaction[]
}

model Favourite {
  id        Int      @id @default(autoincrement())
  work      Work?    @relation(fields: [workId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  studio    Studio?  @relation(fields: [studioId], references: [id])
  creator   Creator? @relation(fields: [creatorId], references: [id])
  creatorId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workId    Int?
  userId    Int
  studioId  Int?
  postId    Int?
}

model Reaction {
  id        Int      @id @default(autoincrement())
  type      String   @unique @db.VarChar(15)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  creator   Creator? @relation(fields: [creatorId], references: [id])
  creatorId Int?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  pork      Work?    @relation(fields: [workId], references: [id])
  workId    Int?
  studio    Studio?  @relation(fields: [studioId], references: [id])
  studioId  Int?
}

model Skill {
  id          Int       @id @default(autoincrement())
  name        String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  creators    Creator[]
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String     @unique @db.VarChar(100)
  catergories  Category[] @relation("CategoryToCategory")
  skills       Skill[]
  works        Work[]
  jobs         Job[]
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  p_category   Category?  @relation("CategoryToCategory", fields: [p_categoryId], references: [id])
  p_categoryId Int?
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  comment   String?
  rating    Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  work      Work     @relation(fields: [workId], references: [id])
  workId    Int
}

model Message {
  id          Int       @id @default(autoincrement())
  to          User      @relation("Recieved", fields: [toId], references: [id])
  from        User      @relation("Sent", fields: [fromId], references: [id])
  fromId      Int
  toId        Int
  message     String
  replies     Message[] @relation("ReplyToMessage")
  p_message   Message?  @relation("ReplyToMessage", fields: [p_messageId], references: [id])
  p_messageId Int?
  createdAt   DateTime  @default(now())
}

model Post {
  id         Int         @id @default(autoincrement())
  slug       String      @unique @db.VarChar(200)
  title      String      @db.VarChar(200)
  content    String
  thumbnail  String?     @db.VarChar(500)
  author     User        @relation(fields: [authorId], references: [id])
  authorId   Int
  comments   Comment[]
  favourites Favourite[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  reactions  Reaction[]
}

model Comment {
  id          Int       @id @default(autoincrement())
  post        Post?     @relation(fields: [postId], references: [id])
  postId      Int?
  p_comment   Comment?  @relation(fields: [p_commentId], references: [id], name: "CommentToComment")
  p_commentId Int?
  message     String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[] @relation("CommentToComment")
}

model Work {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(200)
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  creator     Creator     @relation(fields: [creatorId], references: [id])
  favourites  Favourite[]
  studio      Studio?     @relation(fields: [studioId], references: [id])
  studioId    Int?
  reviews     Review[]
  orders      Order[]
  price       Decimal?    @db.Money
  currency    String?     @default("NGN") @db.VarChar(3)
  sellAs      String?     @db.VarChar(15)
  creatorId   Int
  reactions   Reaction[]
  files       Json?
  User        User?       @relation(fields: [userId], references: [id])
  userId      Int?
}

model Order {
  id          Int      @id @default(autoincrement())
  description String?
  collector   User     @relation(fields: [userId], references: [id])
  works       Work[]
  price       Decimal?
  currency    String?  @db.VarChar(3)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
}

model Studio {
  id          Int         @id @default(autoincrement())
  name        String      @unique @db.VarChar(100)
  description String?
  creator     Creator     @relation(fields: [creatorId], references: [id])
  works       Work[]
  favourites  Favourite[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  creatorId   Int         @unique
  reactions   Reaction[]
}

model Job {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(200)
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  owner       User      @relation(fields: [ownerId], references: [id])
  applicants  Creator[]
  ownerId     Int
}

model Contact {
  id        Int      @id @default(autoincrement())
  type      String   @db.VarChar(20)
  phone     String   @unique @db.VarChar(15)
  email     String   @db.VarChar(500)
  address   String
  position  String?  @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  expired   Boolean  @default(false)
}
